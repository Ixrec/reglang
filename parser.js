parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          /^[ \t\n]/,
          { type: "class", value: "[ \\t\\n]", description: "[ \\t\\n]" },
          function(body) { return body; },
          "define",
          { type: "literal", value: "define", description: "\"define\"" },
          /^[A-Za-z]/,
          { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },
          function(chars, exprs) { userDefines[chars.join("")] = exprs; },
          function(from, to, match) { return { match: match, from: from, to: to } },
          function(match) { return { match: match } },
          "from",
          { type: "literal", value: "from", description: "\"from\"" },
          function(locator) { return locator; },
          "anywhere",
          { type: "literal", value: "anywhere", description: "\"anywhere\"" },
          function() { return "anywhere"; },
          "linestart",
          { type: "literal", value: "linestart", description: "\"linestart\"" },
          function() { return "linestart"; },
          "to",
          { type: "literal", value: "to", description: "\"to\"" },
          "lineend",
          { type: "literal", value: "lineend", description: "\"lineend\"" },
          function() { return "lineend"; },
          "match",
          { type: "literal", value: "match", description: "\"match\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(settings, exprs) { return { ast: exprs, settings: settings.join("") }; },
          function(exprs) { return { ast: exprs }; },
          function(lhs, rhs) { return lhs.concat(rhs); },
          function(setting) { return setting; },
          "caseinsensitive",
          { type: "literal", value: "caseinsensitive", description: "\"caseinsensitive\"" },
          function() { return ["i"]; },
          "casesensitive",
          { type: "literal", value: "casesensitive", description: "\"casesensitive\"" },
          function() { return []; },
          "global",
          { type: "literal", value: "global", description: "\"global\"" },
          function() { return ["g"]; },
          "multiline",
          { type: "literal", value: "multiline", description: "\"multiline\"" },
          function() { return ["m"]; },
          "and",
          { type: "literal", value: "and", description: "\"and\"" },
          function(expr, exprs) { return { conjunction: { lhs: expr, rhs: exprs } };},
          "or",
          { type: "literal", value: "or", description: "\"or\"" },
          function(expr, exprs) { return { disjunction: { lhs: expr, rhs: exprs } };},
          function(expr) { return expr;},
          function(quantifier, block) { return { quantifier: quantifier.quantifier, block: block.block, qualifiers: block.qualifiers }; },
          function(block) { return { block: block.block, qualifiers: block.qualifiers }; },
          function(quantifier, set) { return { quantifier: quantifier.quantifier, set: set.set }; },
          function(set) { return { set: set.set }; },
          function(quantifier, literal) { return { quantifier: quantifier.quantifier, literal: literal.literal }; },
          function(literal) { return { literal: literal.literal }; },
          function(quantifier, ident) {
                var obj = {};
                obj.quantifier = quantifier.quantifier;
                var type = Object.keys(ident)[0];
                obj[type] = ident[type];
                return obj;
              },
          function(ident) { return ident; },
          function(qualifiers, exprs) { return { block: exprs, qualifiers: qualifiers }; },
          function(exprs) { return { block: exprs }; },
          function(qualifier) { return qualifier; },
          "capture",
          { type: "literal", value: "capture", description: "\"capture\"" },
          function() { return ["capture"]; },
          "positive_lookahead",
          { type: "literal", value: "positive_lookahead", description: "\"positive_lookahead\"" },
          function() { return ["positive_lookahead"]; },
          "negative_lookahead",
          { type: "literal", value: "negative_lookahead", description: "\"negative_lookahead\"" },
          function() { return ["negative_lookahead"]; },
          "lazy",
          { type: "literal", value: "lazy", description: "\"lazy\"" },
          function(quantifier) {
                var quantifier = quantifier.quantifier;
                quantifier.lazy = true;
                return { quantifier: quantifier };
              },
          function(quantifier) { return { quantifier: quantifier.quantifier }; },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          "orMore",
          { type: "literal", value: "orMore", description: "\"orMore\"" },
          function(leftDigits) { return {
                quantifier: { lower: parseInt(leftDigits.join(""), 10),
                              upper: Infinity }};
              },
          function(leftDigits, rightDigits) { return {
                quantifier: { lower: parseInt(leftDigits.join(""), 10), 
                              upper: parseInt(rightDigits.join(""), 10) }
              };},
          "not",
          { type: "literal", value: "not", description: "\"not\"" },
          function(set) {
                if(set.set) {
                  return { negatedSet: set.set };
                }
              },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(elements) {
                var set = [];
                for(var i = 0; i < elements.length; ++i) {
                  if(elements[i].literal) {
                    set = set.concat(elements[i].literal);
                  }
                }
                return {
                  set: set
                };
              },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(element, more_elements) { return [ element ].concat(more_elements); },
          function(element) { return [ element ]; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          /^[^"]/,
          { type: "class", value: "[^\"]", description: "[^\"]" },
          function(chars) { return {
                literal: chars
              };},
          "digit",
          { type: "literal", value: "digit", description: "\"digit\"" },
          function() { return { literal: ["\\d"] }; },
          "whitespace",
          { type: "literal", value: "whitespace", description: "\"whitespace\"" },
          function() { return { literal: ["\\s"] }; },
          "wordchar",
          { type: "literal", value: "wordchar", description: "\"wordchar\"" },
          function() { return { literal: ["\\w"] }; },
          "char",
          { type: "literal", value: "char", description: "\"char\"" },
          function() { return { literal: ["CHAR"] }; },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          function(char, chars) {
                var id = char + chars.join("");
                if(userDefines[id]) { return userDefines[id]; }
                throw new Error("Undefined symbol: '" + id + "'");
              }
        ],

        peg$bytecode = [
          peg$decode("%$4 \"\"5!7!0)*4 \"\"5!7!&/x#;!/o$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/M$;#/D$$4 \"\"5!7!0)*4 \"\"5!7!&/($8%:\"%!!)(%'#($'#(#'#(\"'#&'#.j &%$4 \"\"5!7!0)*4 \"\"5!7!&/M#;#/D$$4 \"\"5!7!0)*4 \"\"5!7!&/($8#:\"#!!)(#'#(\"'#&'#"),
          peg$decode("%;\"/N#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/,$;!/#$+#)(#'#(\"'#&'#.# &;\""),
          peg$decode("%2#\"\"6#7$/\x98#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/v$$4%\"\"5!7&/,#0)*4%\"\"5!7&&&&#/T$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;+/)$8%:'%\"\" )(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;$/\x80#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/^$;&/U$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/3$;(/*$8%:(%#$\" )(%'#($'#(#'#(\"'#&'#./ &%;(/' 8!:)!! )"),
          peg$decode("%2*\"\"6*7+/S#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/1$;%/($8#:,#! )(#'#(\"'#&'#"),
          peg$decode("%2-\"\"6-7./& 8!:/! ).4 &%20\"\"6071/& 8!:2! )"),
          peg$decode("%23\"\"6374/S#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/1$;'/($8#:,#! )(#'#(\"'#&'#"),
          peg$decode("%2-\"\"6-7./& 8!:/! ).4 &%25\"\"6576/& 8!:7! )"),
          peg$decode("%28\"\"6879/\xCF#$4 \"\"5!7!0)*4 \"\"5!7!&/\xB3$;)/\xAA$$4 \"\"5!7!0)*4 \"\"5!7!&/\x8E$2:\"\"6:7;/$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/]$;+/T$$4 \"\"5!7!0)*4 \"\"5!7!&/8$2<\"\"6<7=/)$8):>)\"&\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.\xB9 &%28\"\"6879/\xA9#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/\x87$2:\"\"6:7;/x$$4 \"\"5!7!0)*4 \"\"5!7!&/\\$;+/S$$4 \"\"5!7!0)*4 \"\"5!7!&/7$2<\"\"6<7=/($8':?'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;*/T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;)/)$8#:@#\"\" )(#'#(\"'#&'#./ &%;*/' 8!:A!! )"),
          peg$decode("%2B\"\"6B7C/& 8!:D! ).b &%2E\"\"6E7F/& 8!:G! ).K &%2H\"\"6H7I/& 8!:J! ).4 &%2K\"\"6K7L/& 8!:M! )"),
          peg$decode("%;,/\x85#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/c$2N\"\"6N7O/T$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;+/)$8%:P%\"$ )(%'#($'#(#'#(\"'#&'#.\xA1 &%;,/\x85#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/c$2Q\"\"6Q7R/T$$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;+/)$8%:S%\"$ )(%'#($'#(#'#(\"'#&'#./ &%;,/' 8!:T!! )"),
          peg$decode("%;0/T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;-/)$8#:U#\"\" )(#'#(\"'#&'#.\u0128 &%;-/' 8!:V!! ).\u0116 &%;0/T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;2/)$8#:W#\"\" )(#'#(\"'#&'#.\xD5 &%;2/' 8!:X!! ).\xC3 &%;0/T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;4/)$8#:Y#\"\" )(#'#(\"'#&'#.\x82 &%;4/' 8!:Z!! ).p &%;0/T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;5/)$8#:[#\"\" )(#'#(\"'#&'#./ &%;5/' 8!:\\!! )"),
          peg$decode("%;./\xA4#$4 \"\"5!7!0)*4 \"\"5!7!&/\x88$2:\"\"6:7;/y$$4 \"\"5!7!0)*4 \"\"5!7!&/]$;+/T$$4 \"\"5!7!0)*4 \"\"5!7!&/8$2<\"\"6<7=/)$8':]'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#.\x88 &%2:\"\"6:7;/x#$4 \"\"5!7!0)*4 \"\"5!7!&/\\$;+/S$$4 \"\"5!7!0)*4 \"\"5!7!&/7$2<\"\"6<7=/($8%:^%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;//T#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/2$;./)$8#:@#\"\" )(#'#(\"'#&'#./ &%;//' 8!:_!! )"),
          peg$decode("%2`\"\"6`7a/& 8!:b! ).K &%2c\"\"6c7d/& 8!:e! ).4 &%2f\"\"6f7g/& 8!:h! )"),
          peg$decode("%;1/Y#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/7$2i\"\"6i7j/($8#:k#!\")(#'#(\"'#&'#./ &%;1/' 8!:l!! )"),
          peg$decode("%$4m\"\"5!7n/,#0)*4m\"\"5!7n&&&#/7#2o\"\"6o7p/($8\":q\"!!)(\"'#&'#.} &%$4m\"\"5!7n/,#0)*4m\"\"5!7n&&&#/Z#23\"\"6374/K$$4m\"\"5!7n/,#0)*4m\"\"5!7n&&&#/)$8#:r#\"\" )(#'#(\"'#&'#"),
          peg$decode("%2s\"\"6s7t/S#$4 \"\"5!7!/,#0)*4 \"\"5!7!&&&#/1$;2/($8#:u#! )(#'#(\"'#&'#.\x88 &%2v\"\"6v7w/x#$4 \"\"5!7!0)*4 \"\"5!7!&/\\$;3/S$$4 \"\"5!7!0)*4 \"\"5!7!&/7$2x\"\"6x7y/($8%:z%!\")(%'#($'#(#'#(\"'#&'#"),
          peg$decode("%;4/y#$4 \"\"5!7!0)*4 \"\"5!7!&/]$2{\"\"6{7|/N$$4 \"\"5!7!0)*4 \"\"5!7!&/2$;3/)$8%:}%\"$ )(%'#($'#(#'#(\"'#&'#./ &%;4/' 8!:~!! )"),
          peg$decode("%2\"\"67\x80/S#$4\x81\"\"5!7\x820)*4\x81\"\"5!7\x82&/7$2\"\"67\x80/($8#:\x83#!!)(#'#(\"'#&'#.y &%2\x84\"\"6\x847\x85/& 8!:\x86! ).b &%2\x87\"\"6\x877\x88/& 8!:\x89! ).K &%2\x8A\"\"6\x8A7\x8B/& 8!:\x8C! ).4 &%2\x8D\"\"6\x8D7\x8E/& 8!:\x8F! )"),
          peg$decode("%4\x90\"\"5!7\x91/E#$4%\"\"5!7&0)*4%\"\"5!7&&/)$8\":\x92\"\"! )(\"'#&'#")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
